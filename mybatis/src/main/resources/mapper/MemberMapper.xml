<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="ksmart.mybatis.mapper.MemberMapper">
	<!--  mybatis DTO와 ResultSet의 결과값을 미리 매핑 정의-->
	<!--  resultMap의 column은 조회 시점의 칼럼명이다. -->
	<resultMap type="Member" id="memberResultMap">	
		<id column="m_id" property="memberId"/>		
		<result column="m_pw" property="memberPw"/>
		<result column="m_name" property="memberName"/>
		<result column="m_level" property="memberLevel"/>
		<result column="m_email" property="memberEmail"/>
		<result column="m_addr" property="memberAddr"/>
		<result column="m_reg_date" property="memberRegDate"/>
	</resultMap>
	
	<select id="getLoginCnt" resultType="int">
	/* 로그인 이력 테이블의 전체 행의 갯수 */
	
		SELECT
			COUNT(*)
		FROM
			tb_login;
	</select>
	
	<select id="getLoginHistoryList" parameterType="map" resultType="map">
	/* 로그인 이력 조회 */
		SELECT
			l.login_date as loginDate,
			l.logout_date as logoutDate,
			m.m_id as memberId,
			m.m_name as memberName,
			ml.level_name as levelName,
			m.m_email as memberEmail
		FROM
			tb_login AS l
			INNER join
			tb_member AS m
			on
			l.login_id = m.m_id
			INNER JOIN
			tb_member_level AS ml
			ON 
			m.m_level = ml.level_num
		<if test="startIndex != null and startIndex > -1">
		LIMIT
			#{startIndex}, #{rowPerPage};
		</if>
	</select>
	
	
	
	
	
	
	<!-- 회원의 레벨 조회 -->
	<select id="getMemberInfoByLevel" parameterType="int" resultMap="memberResultMap">
		/* 회원의 레벨 조회*/
		SELECT
			m_id,
			m_name,
			m_level,
			m_email,
			m_addr,
			m_reg_date
		FROM
			tb_member
		WHERE
			m_level = #{memberLevel}
	</select>
	
	
	<!-- 회원 삭제 -->
	<delete id ="removeMemberById" parameterType="String">
		/* 회원 삭제 */
		DELETE
		FROM
			tb_member AS m
		WHERE
			m.m_id = #{memberId};
	</delete>
	
	<!-- 로그인 이력 삭제 -->
	<delete id="removeLoginHistoryById" parameterType="String">
		/* 회원 로그인 이력 삭제*/
		DELETE
		FROM
			tb_login AS l
		WHERE
			l.login_id = #{memberId};
	
	</delete>
	<!--  회원 구매이력 삭제 -->
	<delete id = "removeOrderById" parameterType="String">
		/* 구매자별 구매이력 */
		DELETE
		FROM
			tb_order as o
		WHERE
			o.o_id = #{memberId};
	</delete>
	
    <!-- 회원 수정 -->
	<update id="modifyMember" parameterType="Member">
		/*	회원 수정  */
		UPDATE tb_member
		<!-- /* trim을 사용하는 이유는 동적 쿼리를 만들기 위해서 SET, WHERE*/ -->
		<trim prefix="SET" suffixOverrides=",">
			<if test="memberPw != null and memberPw != '' ">
				m_pw = #{memberPw},
			</if>
			<if test="memberName != null and memberName != '' ">			
				m_name = #{memberName},
			</if>
			<if test="memberLevel != null and memberLevel != '' ">
				m_level = #{memberLevel},
			</if>
			<if test="memberEmail != null and memberEmail != '' ">
				m_email = #{memberEmail},
			</if>
			<if test="memberAddr != null and memberAddr != '' ">
				m_addr = #{memberAddr}
			</if>
		</trim>
		WHERE
			m_id = #{memberId};
	</update>
    
    <!-- 회원 별 상세 조회-->
    <select id="getMemberInfoById" parameterType="String" resultMap="memberResultMap">
    	/* 회원별 상세 조회*/
    	SELECT
			m.m_id,
			m.m_pw,
			m.m_name,
			m.m_level,
			m.m_email,
			m.m_addr,
			m.m_reg_date
		FROM
			tb_member AS m
		WHERE
			m.m_id = #{memberId};
    	
    </select>
    
    <!-- 회원 전체 목록 조회 -->
    <select id="getMemberList" parameterType="map" resultType="Member">
   		/* 태그 안에는 하나의 쿼리 문장만 해야 원할함*/ 
    	/* 회원 목록 조회*/ 
		   SELECT
				m_id AS memberId,
				m_pw AS memberPw,
				m_name AS memberName,
				m_level AS memberLevel,
				m_email AS memberEmail,
				m_addr AS memberAddr,
				m_reg_date AS memberRegDate
			FROM
				tb_member
			<where>
				<if test="searchValue != null and searchValue != '' ">
					${searchKey} Like CONCAT('%', #{searchValue}, '%')
				</if>
			</where>	    	
    </select>
	
	 
	<!-- 회원 등급 조회 -->
    <select id="getMemberLevelList" resultType="MemberLevel">
    	/* 회원 등급 조회 */
			SELECT
				l.level_num as levelNum,
				l.level_name as levelName
			FROM
				tb_member_level as l
    </select>
   
    <!-- 아이디 중복체크 -->
    <select id="idCkeck" resultType="boolean" parameterType="String">
    	/* 아이디 중복 체크 */
    	
    	SELECT
    		IF(COUNT(m.m_id) >0, 1, 0)
    	FROM
    		tb_member as m
    	WHERE
    		m.m_id = #{memberId};
    </select>
    
    <!-- 회원가입 -->
    <insert id="addMember" parameterType="Member">
   		/* 회원가입 */
   		INSERT INTO
    		tb_member
    		(m_id, m_pw, m_name, m_level, m_email, m_addr, m_reg_date)
    	VALUE
    		(#{memberId}, #{memberPw}, #{memberName}, #{memberLevel}, #{memberEmail}, #{memberAddr}, CURDATE());
    </insert>
    
</mapper>